from .data_reader import (
    GSClientReader,
    load_xlsx,
    get_sheetnames,
    processing_xlsx_sheet
    )
from .import_data import create_collection, fill_collection
from typing import Optional, Union, Dict


class Interface:
    """
    Default dialogue user interface gith several otions for moving to the
    next interface.

    :param name: string representation interface name.
    :param parent: parent interface, used for the return options to the
        previous interface
    :param entry_point: for assign an entry point (Main menue), specify 'True'
    :param additional_options: options that are generated by the user or during
        interface processing
    :param default_options: set of standart options
    """
    def __init__(
            self,
            name: str,
            parent: Optional['Interface'] = None,
            entry_point: bool = False):
        self.name = name
        self.parent = parent
        self.entry_point = entry_point
        self.additional_options = {}
        self.default_options = {}

    def add_option(self, *options: Union['Interface', None]):
        """
        generated set of options for Interface
        """
        for n, option in enumerate(options, 1):
            option.set_parent(self)
            self.additional_options[n] = option

        if self.parent:
            self.default_options['-'] = Interface('Back')
            if not self.parent.entry_point:
                self.default_options[0] = Interface('Main menue')

    def get_option_set(self) -> Dict[Union[int, str], 'Interface']:
        """
        combines set of additional and default options
        """
        return {**self.additional_options, **self.default_options}

    def set_parent(self, parent_interface):
        self.parent = parent_interface

    def get_parent(self):
        return self.parent

    def get_option(self, key):
        return self.additional_options[key]

    def print_content(self):
        print(self.name)

    def get_user_responce(self):
        for key, option in self.get_option_set().items():
            print(key, option.name)

        while True:
            user_response = input('select the option:\n')
            if user_response.isdigit():
                user_response = int(user_response)
            if user_response in self.get_option_set():
                break
            else:
                print('incorrect option, try again')
        return user_response

    def execute_interface(self):
        self.print_content()
        user_response = self.get_user_responce()
        if user_response == 0:
            next_ui = self.default_options[0]
        elif user_response == '-':
            next_ui = self.get_parent()
        else:
            next_ui = self.get_option(user_response)
        return next_ui

    def __repr__(self):
        return (f"<Interface '{self.name}', entry_point: "
                f" {self.entry_point}, parent: "
                f"[{self.parent.name if self.parent else None}]> "
                f"additional_optionals: {self.additional_options}"
                f"default_options: {self.default_options}")


class GoogleSheetsInterface(Interface):
    """
    Interface for interracting with Google Sheets
    """
    def __init__(self, name, parent) -> None:
        Interface.__init__(self, name, parent)
        self.table_content = []

    def execute_interface(self):
        self.print_content()
        gs_reader = GSClientReader()

        ws_list = gs_reader.get_worksheets()
        for n, ws in enumerate(ws_list, 1):
            print(f"{n}. {ws.title}")

        while True:
            user_responce = int(input('select the option:\n'))
            if user_responce in range(1, (len(ws_list)+1)):
                break
            else:
                print('incorrect option, try again')

        self.table_content = gs_reader.get_ws_data(ws_list[user_responce-1])
        for n, data in enumerate(self.table_content, 1):
            print(f" - {n}. {data[0]}: {', '.join(data[1:])}")

        self.add_option(DBInterface('Save to...', parent=self))

        user_response = self.get_user_responce()

        if user_response == 0:
            next_ui = self.default_options[0]
        elif user_response == '-':
            next_ui = self.get_parent()
        else:
            next_ui = self.get_option(user_response)
        return next_ui


class XLSXInterface(Interface):
    """
    Interface for interrcating with xls files
    """
    def __init__(self, name, parent):
        Interface.__init__(self, name, parent)
        self.table_content = []

    def execute_interface(self):
        self.print_content()
        file_name = str(input("Enter file name:\n"))
        wb = load_xlsx(file_name)
        sheets_list = get_sheetnames(wb)

        for n, sh in enumerate(sheets_list, 1):
            print(f"{n}. {sh}")

        while True:
            user_responce = int(input('select the option:\n'))
            if user_responce in range(1, (len(sheets_list)+1)):
                break
            else:
                print('incorrect option, try again')

        self.table_content = processing_xlsx_sheet(
            wb,
            sheets_list[user_responce-1]
            )
        for n, data in enumerate(self.table_content, 1):
            print(f" - {n}. {data[0]}: {', '.join(data[1:])}")

        self.add_option(DBInterface('Save to...', parent=self))

        user_response = self.get_user_responce()

        if user_response == 0:
            next_ui = self.default_options[0]
        elif user_response == '-':
            next_ui = self.get_parent()
        else:
            next_ui = self.get_option(user_response)
        return next_ui


class DBInterface(Interface):
    """
    Interface for interracting with database
    """
    def __init__(self, name, parent=None):
        super().__init__(name, parent)

    def execute_interface(self):
        self.print_content()
        new_collection = Interface('Create new collection')
        exist_collection = Interface('Add to existing collection')
        self.add_option(new_collection, exist_collection)
        user_response = self.get_user_responce()
        if user_response == 0:
            next_ui = self.default_options[user_response]
        elif user_response == '-':
            next_ui = self.get_parent()
        elif user_response == 1:
            collection_name = input('Enter the name for the new collection:\n')
            create_collection(collection_name)
            fill_collection(collection_name, self.parent.table_content)
            next_ui = self.default_options[0]
        return next_ui


class DialogController:
    """
    Interaces Handler
    """
    def __init__(self, main_interface):
        self.main_interface = main_interface

    def run_cli(self, ui):
        res_ui = ui.execute_interface()
        if res_ui.name == 'Main menue':
            res_ui = self.main_interface
        self.run_cli(res_ui)
